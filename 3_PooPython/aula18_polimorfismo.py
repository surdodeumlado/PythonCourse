# Polimorfismo em Python Orientado a Objetos

# Polimorfismo √© o princ√≠pio que permite que classes deridavas de uma mesma superclasse tenham m√©todos iguais (com mesma assinatura) mas comportamentos diferentes.

# Assinatura do m√©todo = Mesmo nome e quantidade de par√¢metros (retorno n√£o faz parte da assinatura)

# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.

# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
from abc import ABC, abstractmethod


class Notificacao:
    def __init__(self, msg) -> None:  # deve retornar algo (a frente do ->)
        self.msg = msg

    @abstractmethod
    def enviar(self) -> bool:  # deve retornar bool
        ...


class NotificacaoEmail(Notificacao):
    def enviar(self) -> bool:
        print('E-mail enviando:', self.msg)
        return True


class NotificacaoSMS(Notificacao):
    def enviar(self) -> bool:
        print('SMS enviando:', self.msg)
        return True


def notificar(notificacao: Notificacao):  # esses : str est√° dizendo para minha ide, para meu python que: este par√¢metro que est√° sendo passado √© do tipo str. O python n√£o vai necessariamente fazer algo com isso, ele apenas vai facilitar pra gente na hora de escrever e vai deixar o nosso c√≥digo mais facil de ler para programadores que estar√£o vendo isso daqui. Caso passarmos algum parametro de outro tipo dentro de notificacao, nada vai acontecer (ao menos que a gente tente usar um m√©todo de string em um bool/int por exemplo)

    # Como o m√©todo .enviar() retornaria um bool ( -> bool ), essa opera√ß√£o ser√° de tipo boolean
    notificacao_enviada = notificacao.enviar()

    if notificacao_enviada:
        print('Notifica√ß√£o enviada')

    else:
        print('Notifica√ß√£o N√ÉO enviada')


notificacao_email = NotificacaoEmail('Testando Email.')
notificar(notificacao_email)
notificar(NotificacaoEmail)
